// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// ENUMS
enum ProjectVisibility {
  PUBLIC
  PRIVATE
}

enum ProjectStatus {
  OPEN
  CLOSED
}

enum ColumnColor {
  GRAY
  BLUE
  GREEN
  YELLOW
  ORANGE
  RED
  PINK
  PURPLE
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

// MODELS
model User {
  id              Int     @id @default(autoincrement())
  name            String
  username        String  @unique
  email           String  @unique
  followersCount  Int     @default(0)
  followingsCount Int     @default(0)
  location        String?
  website         String?
  password        String

  projects      Project[]
  collaborators Collaborator[]
  tasks         Task[]
  followers     Follow[]       @relation("followers")
  followings    Follow[]       @relation("followings")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Project {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  visibility  ProjectVisibility @default(PUBLIC)
  status      ProjectStatus     @default(OPEN)
  author      User              @relation(fields: [authorId], references: [id])
  authorId    Int

  collaborators Collaborator[]
  columns       Column[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId, name])
  @@map("projects")
}

model Collaborator {
  projectId Int
  userId    Int

  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
  @@map("collaborators")
}

model Column {
  id          Int         @id @default(autoincrement())
  projectId   Int
  label       String
  color       ColumnColor @default(GRAY)
  description String?
  hidden      Boolean     @default(false)

  project Project @relation(fields: [projectId], references: [id])
  tasks   Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("columns")
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  assigneeId  Int
  columnId    Int
  priority    TaskPriority @default(LOW)

  column   Column @relation(fields: [columnId], references: [id])
  assignee User?  @relation(fields: [assigneeId], references: [id])

  @@map("tasks")
}

model Follow {
  followerId  Int
  followingId Int

  follower  User @relation(fields: [followerId], references: [id], name: "followers")
  following User @relation(fields: [followingId], references: [id], name: "followings")

  @@id([followerId, followingId])
  @@map("follows")
}
